var searchIndex = JSON.parse('{\
"erased_cells":{"doc":"Encoding and manipulation of runtime-dynamic cell values.","t":"IEDIEENNNNNNNNNNNNNNNNNNNDDDENNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOKLLLLNENNNNGLLLLLLLLLLMM","n":["BufferOps","CellBuffer","CellBufferIterator","CellEncoding","CellType","CellValue","Default","Float32","Float32","Float32","Float64","Float64","Float64","Int16","Int16","Int16","Int32","Int32","Int32","Int64","Int64","Int64","Int8","Int8","Int8","Mask","MaskedCellBuffer","MaskedCellBufferIterator","NoData","None","UInt16","UInt16","UInt16","UInt32","UInt32","UInt32","UInt64","UInt64","UInt64","UInt8","UInt8","UInt8","Value","add","add","add","add","add","add","add","add","add","add","all","bitand","bitand","bitor","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_mut","can_fit_into","cell_type","cell_type","cell_type","cell_type","cell_type","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","convert","convert","convert","convert","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","div","div","div","div","div","div","div","div","div","div","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","error","extend","extend","extend","fill","fill","fill","fill","fill_via","fill_via","fill_via","fill_via","fill_with_mask_via","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_str","from_vec","from_vec","from_vec","get","get","get","get","get","get_masked","get_with_mask","index","index_mut","into","into","into","into","into","into","into","into","into_cell_value","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_integral","is_signed","is_zero","iter","len","len","len","len","mask","mask_mut","max","min","min_max","min_max","min_max","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","neg","neg","new","new","new","new","next","next","not","not","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","put","put","put","serialize","serialize","serialize","serialize","serialize","set","size_of","static_cast","static_cast","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_f64","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_u64","to_vec","to_vec","to_vec","to_vec_with_nodata","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unify","union","value","with_ct","with_defaults","with_defaults","with_defaults","zero","zero","Err","Error","ExpectedError","NarrowingError","Ok","ParseError","Result","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","dst","src"],"q":[[0,"erased_cells"],[305,"erased_cells::error"],[322,"erased_cells::error::Error"],[324,"core::convert"],[325,"core::clone"],[326,"core::cmp"],[327,"core::marker"],[328,"core::result"],[329,"serde::de"],[330,"core::cmp"],[331,"core::ops::function"],[332,"core::fmt"],[333,"core::fmt"],[334,"core::option"],[335,"core::iter::traits::iterator"],[336,"serde::ser"],[337,"alloc::string"],[338,"core::any"]],"d":["","","","Trait for marking Rust primitives as having a …","Cell-type variants","Value variants for each <code>CellType</code>","Case where there the default no-data value should be used.","","","","","","","","","","","","","","","","","","","Encodes the bit-mask for <code>MaskedCellBuffer</code>","","","Encodes a no-data value for cells that should be …","Case where there is no no-data value.","","","","","","","","","","","","","Case where a specific no-data value is specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determine of <code>self</code> can fit within <code>other</code>.","Returns the <code>CellType</code> covering <code>Self</code>.","Get the cell type of the encoded value.","Get the cell type of the encoded values.","","Get the <code>CellType</code> encoding <code>self</code>.","","","","","","","","","","","","","","","Create a new <code>CellBuffer</code> whereby all <code>CellValue</code>s are …","Create a new <code>CellBuffer</code> whereby all <code>CellValue</code>s are …","","Convert <code>self</code> into a variant with <code>CellType</code> <code>cell_type</code> equal …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a buffer of size <code>len</code> with all values <code>value</code>.","Create a buffer of size <code>len</code> with all values <code>value</code>.","","","Fill a buffer of size <code>len</code> with values from a closure.","Fill a buffer of size <code>len</code> with values from a closure.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Construct a <code>CellBuffer</code> from a <code>Vec&lt;T&gt;</code>.","Construct a <code>CellBuffer</code> from a <code>Vec&lt;T&gt;</code>.","","Get the <code>CellValue</code> at index <code>idx</code>.","Get the <code>CellValue</code> at the given <code>index</code>.","","","Get the <code>CellValue</code> contents as a <code>T</code>.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a <code>CellValue</code>.","","","","","","Determine if the buffer has zero values in it.","Determine if the buffer has zero values in it.","","Determine if <code>self</code> is integral or floating-point.","Determine if <code>self</code> is signed or unsigned.","","Get an iterator over all the valid enumeration values.","Get the length of the buffer.","Get the length of the buffer.","","","","","Determine the maximum value that can be represented by <code>self</code>…","Determine the minimum value that can be represented by <code>self</code>…","Compute the minimum and maximum values the buffer.","","","","","","","","","","","","","","","","","","","Create a new combined <code>CellBuffer</code> and <code>Mask</code>.","","Construct new <code>CellValue</code> from a statically known …","","","","","Construct the one value for a variant.","","","","","","Store <code>value</code> at position <code>idx</code>.","","","","","","","","","Number of bytes needed to encode <code>self</code>.","Convert dynamic type to static type when logically known. …","Convert dynamic type to static type when logically known. …","","","","","","","","","","","","","","","","","","","","","Convert <code>self</code> into a <code>Vec&lt;T&gt;</code>.","Convert <code>self</code> into a <code>Vec&lt;T&gt;</code>.","Converts <code>self</code> to <code>Vec&lt;T&gt;</code> with default NoData value.","Convert <code>self</code> into a <code>Vec&lt;T&gt;</code>, replacing values where the …","","","","","","","","","","","","","","","","","","","","","","","","","Determines the smallest cell type that can contain <code>self</code> …","Select the <code>CellType</code> that can numerically contain both <code>self</code> …","","A callback style macro used to construct various …","Construct a <code>CellBuffer</code> of given <code>len</code> length and <code>ct</code> <code>CellType</code>","Construct a <code>CellBuffer</code> of given <code>len</code> length and <code>ct</code> <code>CellType</code>","","Construct the zero value for a variant.","","Contains the error value","","","","Contains the success value","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,8,1,7,2,1,7,2,1,7,2,1,7,2,1,7,2,1,7,2,0,0,0,0,8,1,7,2,1,7,2,1,7,2,1,7,2,8,1,1,1,1,4,4,4,4,2,2,5,5,5,5,5,29,30,1,7,5,4,8,2,29,30,1,7,5,4,8,2,4,4,7,10,38,1,4,2,1,7,5,4,8,2,1,7,5,4,8,2,5,2,38,1,4,2,1,5,1,7,5,4,2,1,1,1,1,4,4,4,4,2,2,1,7,5,4,8,2,7,5,2,0,1,5,4,38,1,5,4,38,1,5,4,4,1,7,7,5,4,8,2,29,30,1,1,1,7,5,4,4,8,2,2,1,1,4,4,7,38,1,4,38,1,5,4,2,4,4,5,5,29,30,1,7,5,4,8,2,10,29,30,1,5,4,38,1,5,7,7,2,7,38,1,5,4,4,4,7,7,38,1,4,1,1,1,1,4,4,4,4,2,2,1,1,4,4,2,5,4,8,2,29,30,5,5,7,2,1,5,4,2,38,1,4,1,7,5,4,2,5,7,10,10,1,1,1,1,4,4,4,4,2,2,2,2,1,7,5,4,8,2,7,2,38,1,4,4,29,30,1,7,5,4,8,2,29,30,1,7,5,4,8,2,29,30,1,7,5,4,8,2,2,7,8,0,38,1,4,7,2,13,0,37,37,13,37,0,37,37,37,37,37,37,37,37,37,37,39,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1]],[[1,-1],[],[[3,[2]]]],[[1,1]],[[1,1]],[[4,-1],[],[[3,[2]]]],[[4,4]],[[4,4]],[[4,4]],[[2,-1],[],[[3,[2]]]],[[2,-1],[],[[3,[2]]]],[[5,6],6],[[5,5]],[[5,5]],[[5,5]],[[5,5]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,1],[4,1],[[7,7],6],[[],7],[-1,7,[]],[1,7],[4,7],[2,7],[1,1],[7,7],[5,5],[4,4],[[[8,[-1]]],[[8,[-1]]],[9,10]],[2,2],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[5,5],12],[[2,2],12],[[-1,7],[[13,[-1]]],14],[[1,7],[[13,[1]]]],[[4,7],[[13,[4]]]],[[2,7],[[13,[2]]]],[[],1],[[],5],[-1,[[15,[1]]],16],[-1,[[15,[7]]],16],[-1,[[15,[5]]],16],[-1,[[15,[4]]],16],[-1,[[15,[2]]],16],[[1,1]],[[1,1]],[[1,-1],[],[[3,[2]]]],[[1,1]],[[4,-1],[],[[3,[2]]]],[[4,4]],[[4,4]],[[4,4]],[[2,-1],[],[[3,[2]]]],[[2,-1],[],[[3,[2]]]],[[1,1],6],[[7,7],6],[[5,5],6],[[4,4],6],[[[8,[-1]],[8,[-1]]],6,[17,10]],[[2,2],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[1,-1],11,18],[[5,-1],11,18],[[4,-1],11,18],[[19,2],-1,[]],[[19,2],1],[[19,6],5],[[19,2],4],[[19,-1],-2,20,[]],[[19,-1],1,20],[[19,-1],5,20],[[19,-1],4,20],[[19,-1,-2],4,20,20],[[1,21],22],[[7,21],22],[[7,21],22],[[5,21],22],[[4,21],22],[[[8,[-1]],21],22,[23,10]],[[2,21],22],[-1,-1,[]],[-1,-1,[]],[[[24,[-1]]],1,10],[-1,-1,[]],[[[25,[-1]]],1,10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,4],[-1,-1,[]],[-1,2,10],[-1,-1,[]],[-1,1,18],[-1,1,18],[-1,4,18],[-1,4,18],[26,[[15,[7]]]],[[[25,[-1]]],-2,10,[]],[[[25,[-1]]],1,10],[[[25,[-1]]],4,10],[[-1,19],2,[]],[[1,19],2],[[5,19],6],[[4,19],2],[2,[[13,[-1]]],10],[[4,19],[[27,[2]]]],[[4,19],[[11,[2,6]]]],[[5,19]],[[5,19]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[1],[5],[4],[-1,6,[]],[1,6],[5,6],[7,6],[7,6],[2,6],[[],[[0,[28]]]],[-1,19,[]],[1,19],[5,19],[4,19],[4,5],[4,5],[7,2],[7,2],[-1,[[11,[2,2]]],[]],[1,[[11,[2,2]]]],[4,[[11,[2,2]]]],[[1,1]],[[1,1]],[[1,-1],[],[[3,[2]]]],[[1,1]],[[4,-1],[],[[3,[2]]]],[[4,4]],[[4,4]],[[4,4]],[[2,-1],[],[[3,[2]]]],[[2,-1],[],[[3,[2]]]],[1],[1],[4],[4],[2],[[[25,[6]]],5],[[1,5],4],[-1,[[8,[-1]]],10],[-1,2,[10,14]],[29,27],[30,27],[5],[5],[7,2],[[],2],[[1,1],[[27,[12]]]],[[5,5],[[27,[12]]]],[[4,4],[[27,[12]]]],[[2,2],[[27,[12]]]],[[-1,19,2],[[13,[11]]],[]],[[1,19,2],[[13,[11]]]],[[4,19,2],[[13,[11]]]],[[1,-1],15,31],[[7,-1],15,31],[[5,-1],15,31],[[4,-1],15,31],[[2,-1],15,31],[[5,19,6],11],[7,19],[-1,[[27,[-2]]],[10,14],[]],[-1,[[27,[-2]]],[10,14],[]],[[1,1]],[[1,1]],[[1,1]],[[1,-1],[],[[3,[2]]]],[[4,-1],[],[[3,[2]]]],[[4,4]],[[4,4]],[[4,4]],[[2,-1],[],[[3,[2]]]],[[2,-1],[],[[3,[2]]]],[2,[[27,[32]]]],[2,[[27,[33]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,34,[]],[2,[[27,[35]]]],[-1,[[13,[[25,[-2]]]]],[],10],[1,[[13,[[25,[-1]]]]],10],[4,[[13,[[25,[-1]]]]],10],[[4,[8,[-1]]],[[13,[[25,[-1]]]]],10],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[[2,2],[[11,[2,2]]]],[[7,7],7],[[[8,[-1]]],[[27,[-1]]],10],0,[[19,7],-1,[]],[[19,7],1],[[19,7],4],[7,2],[[],2],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[37,21],22],[[37,21],22],[-1,-1,[]],[-1,-2,[],[]],[-1,34,[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,36,[]],0,0],"c":[],"p":[[4,"CellBuffer",0],[4,"CellValue",0],[8,"Into",324],[3,"MaskedCellBuffer",0],[3,"Mask",0],[15,"bool"],[4,"CellType",0],[4,"NoData",0],[8,"Clone",325],[8,"CellEncoding",0],[15,"tuple"],[4,"Ordering",326],[6,"Result",305],[8,"Sized",327],[4,"Result",328],[8,"Deserializer",329],[8,"PartialEq",326],[8,"IntoIterator",330],[15,"usize"],[8,"Fn",331],[3,"Formatter",332],[6,"Result",332],[8,"Debug",332],[15,"slice"],[3,"Vec",333],[15,"str"],[4,"Option",334],[8,"Iterator",335],[3,"CellBufferIterator",0],[3,"MaskedCellBufferIterator",0],[8,"Serializer",336],[15,"f64"],[15,"i64"],[3,"String",337],[15,"u64"],[3,"TypeId",338],[4,"Error",305],[8,"BufferOps",0],[13,"NarrowingError",322]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
